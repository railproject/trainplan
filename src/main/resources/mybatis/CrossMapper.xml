<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="crossDao">

   <select id="getCrossTrainInfoForCrossid" parameterType="map" resultType="org.railway.com.trainplan.entity.CrossTrainInfo">
     select 
	     BASE_CROSS_ID AS crossId,
	     TRAIN_SORT AS trainSort,
	     TRAIN_NBR AS trainNbr,
	     BASE_TRAIN_ID AS baseTrainId ,
	     START_STN AS startStn,
	     START_BUREAU AS startBureau,
	     END_STN AS endStn,
	     END_BUREAU AS endBureau,
	     DAY_GAP AS dayGap ,
	     ALTERNATE_TRAIN_NBR AS alertNateTrainNbr,
	     ALTERNATE_TIME AS alertNateTime ,
	     SPARE_FLAG AS spareFlag,
	     SPARE_APPLY_FLAG AS spareApplyFlage,
	     HIGHLINE_FLAG AS highlineFlag,
	     HIGHLINE_RULE AS highlineRule,
	     COMMONLINE_RULE AS commonLineRule,
	     APPOINT_WEEK AS appointWeek,
	     APPOINT_DAY AS appointDay
	     from base_cross_train where BASE_CROSS_ID=#{crossId}    order by spareApplyFlage,trainSort
   </select>
   
   
   <select id="getCrossInfoForCrossid" parameterType="map" resultType="org.railway.com.trainplan.entity.CrossInfo">
      select 
        BASE_CROSS_ID as crossId,
        BASE_CHART_ID as chartId,
        BASE_CHART_NAME as chartName,
        CROSS_START_DATE as crossStartDate,
        CROSS_END_DATE as crossEndDate,
        
        CROSS_NAME as crossName,
        CROSS_SPARE_NAME as crossSpareName,
        ALTERNATE_DATE as alterNateDate,
        ALTERNATE_TRAIN_NBR as alterNateTranNbr,
        
        SPARE_FLAG as spareFlag ,
        CUT_OLD as  cutOld,
        GROUP_TOTAL_NBR as groupTotalNbr ,
        PAIR_NBR as pairNbr , 
        
        HIGHLINE_FLAG as  highlineFlag,
        HIGHLINE_RULE as  highlineRule,
        COMMONLINE_RULE as  commonlineRule,
        APPOINT_WEEK as appointWeek ,
        
        APPOINT_DAY  as  appointDay,
        CROSS_SECTION  as crossSection ,
        THROUGH_LINE  as  throughline,
        START_BUREAU  as startBureau ,
        
		TOKEN_VEH_BUREAU  as tokenVehBureau ,
		TOKEN_VEH_DEPT  as  tokenVehDept,
		TOKEN_VEH_DEPOT  as tokenVehDepot ,
		TOKEN_PSG_BUREAU  as tokenPsgBureau ,
		
		TOKEN_PSG_DEPT  as tokenPsgDept ,	
		LOCO_TYPE  as locoType ,
		CRH_TYPE  as crhType ,
		ELEC_SUPPLY  as elecSupply ,
		
		DEJ_COLLECT  as dejCollect ,
		AIR_CONDITION  as airCondition ,
		NOTE  as  note,
		CREAT_PEOPLE  as createPeople ,
		CREAT_PEOPLE_ORG  as createPeopleOrg ,
		CREAT_TIME  as  createTime
  
      from base_cross where BASE_CROSS_ID=#{crossId}
   </select>

  <select id="getUnitCrossInfoForCrossId" parameterType="String" resultType="org.railway.com.trainplan.entity.CrossInfo">
  select 
        UNIT_CROSS_ID as unitCrossId,
        MARSHALLING_NAME as marshallingName, 
		GROUP_SERIAL_NBR as groupSerialNbr,
        BASE_CHART_ID as chartId,
        BASE_CHART_NAME as chartName,
        CROSS_START_DATE as crossStartDate,
        CROSS_END_DATE as crossEndDate,
        
        CROSS_NAME as crossName,
        CROSS_SPARE_NAME as crossSpareName,
        ALTERNATE_DATE as alterNateDate,
        ALTERNATE_TRAIN_NBR as alterNateTranNbr,
        
        SPARE_FLAG as spareFlag ,
        CUT_OLD as  cutOld,
        GROUP_TOTAL_NBR as groupTotalNbr ,
        PAIR_NBR as pairNbr , 
        
        HIGHLINE_FLAG as  highlineFlag,
        HIGHLINE_RULE as  highlineRule,
        COMMONLINE_RULE as  commonlineRule,
        APPOINT_WEEK as appointWeek ,
        
        APPOINT_DAY  as  appointDay,
        CROSS_SECTION  as crossSection ,
        THROUGH_LINE  as  throughline,
        START_BUREAU  as startBureau ,
        
		TOKEN_VEH_BUREAU  as tokenVehBureau ,
		TOKEN_VEH_DEPT  as  tokenVehDept,
		TOKEN_VEH_DEPOT  as tokenVehDepot ,
		TOKEN_PSG_BUREAU  as tokenPsgBureau ,
		
		TOKEN_PSG_DEPT  as tokenPsgDept ,	
		LOCO_TYPE  as locoType ,
		CRH_TYPE  as crhType ,
		ELEC_SUPPLY  as elecSupply ,
		
		DEJ_COLLECT  as dejCollect ,
		AIR_CONDITION  as airCondition ,
		NOTE  as  note,
		CREAT_PEOPLE  as createPeople ,
		CREAT_PEOPLE_ORG  as createPeopleOrg ,
		CREAT_TIME  as  createTime
        from unit_cross where base_cross_id=#{crossId} order by GROUP_SERIAL_NBR
  
  </select>
   <select id="getUnitCrossInfoForUnitCrossid" parameterType="map" resultType="org.railway.com.trainplan.entity.CrossInfo">
      select 
        UNIT_CROSS_ID as unitCrossId,
        BASE_CROSS_ID as crossId,
        MARSHALLING_NAME as marshallingName, 
		GROUP_SERIAL_NBR as groupSerialNbr,
        BASE_CHART_ID as chartId,
        BASE_CHART_NAME as chartName,
        CROSS_START_DATE as crossStartDate,
        CROSS_END_DATE as crossEndDate,
        
        CROSS_NAME as crossName,
        CROSS_SPARE_NAME as crossSpareName,
        ALTERNATE_DATE as alterNateDate,
        ALTERNATE_TRAIN_NBR as alterNateTranNbr,
        
        SPARE_FLAG as spareFlag ,
        CUT_OLD as  cutOld,
        GROUP_TOTAL_NBR as groupTotalNbr ,
        PAIR_NBR as pairNbr , 
        
        HIGHLINE_FLAG as  highlineFlag,
        HIGHLINE_RULE as  highlineRule,
        COMMONLINE_RULE as  commonlineRule,
        APPOINT_WEEK as appointWeek ,
        
        APPOINT_DAY  as  appointDay,
        CROSS_SECTION  as crossSection ,
        THROUGH_LINE  as  throughline,
        START_BUREAU  as startBureau ,
        
		TOKEN_VEH_BUREAU  as tokenVehBureau ,
		TOKEN_VEH_DEPT  as  tokenVehDept,
		TOKEN_VEH_DEPOT  as tokenVehDepot ,
		TOKEN_PSG_BUREAU  as tokenPsgBureau ,
		
		TOKEN_PSG_DEPT  as tokenPsgDept ,	
		LOCO_TYPE  as locoType ,
		CRH_TYPE  as crhType ,
		ELEC_SUPPLY  as elecSupply ,
		
		DEJ_COLLECT  as dejCollect ,
		AIR_CONDITION  as airCondition ,
		NOTE  as  note,
		CREAT_PEOPLE  as createPeople ,
		CREAT_PEOPLE_ORG  as createPeopleOrg ,
		CREAT_TIME  as  createTime
  
      from unit_cross where UNIT_CROSS_ID=#{unitCrossId} 
   </select>
  
    <select id="getUnitCrossTrainInfoForUnitCrossid" parameterType="map" resultType="org.railway.com.trainplan.entity.CrossTrainInfo">
     select 
         UNIT_CROSS_TRAIN_ID as unitCrossTrainId,
         UNIT_CROSS_ID as unitCrossId,
	     TRAIN_SORT AS trainSort,
	     TRAIN_NBR AS trainNbr,
	     BASE_TRAIN_ID AS baseTrainId ,
	     START_STN AS startStn,
	     START_BUREAU AS startBureau,
	     END_STN AS endStn,
	     END_BUREAU AS endBureau,
	     DAY_GAP AS dayGap ,
	     ALTERNATE_TRAIN_NBR AS alertNateTrainNbr,
	     ALTERNATE_TIME AS alertNateTime ,
	     SPARE_FLAG AS spareFlag,
	     SPARE_APPLY_FLAG AS spareApplyFlage,
	     HIGHLINE_FLAG AS highlineFlag,
	     HIGHLINE_RULE AS highlineRule,
	     COMMONLINE_RULE AS commonLineRule,
	     APPOINT_WEEK AS appointWeek,
	     APPOINT_DAY AS appointDay
	     from unit_cross_train where UNIT_CROSS_ID=#{unitCrossId} and BASE_TRAIN_ID is not null order by TRAIN_SORT
   </select>
   
  
    <insert id="addUnitCrossInfo"  parameterType="java.util.List" >

		insert into unit_cross
		(UNIT_CROSS_ID,
		MARSHALLING_NAME,
		GROUP_SERIAL_NBR,
		BASE_CROSS_ID,
		BASE_CHART_ID,BASE_CHART_NAME,CROSS_START_DATE,CROSS_END_DATE,
		CROSS_NAME,CROSS_SPARE_NAME,ALTERNATE_DATE,ALTERNATE_TRAIN_NBR,
		SPARE_FLAG,CUT_OLD,GROUP_TOTAL_NBR,PAIR_NBR,
		HIGHLINE_FLAG,HIGHLINE_RULE,COMMONLINE_RULE,APPOINT_WEEK,
		APPOINT_DAY,CROSS_SECTION,THROUGH_LINE,START_BUREAU,
		TOKEN_VEH_BUREAU,TOKEN_VEH_DEPT,TOKEN_VEH_DEPOT,TOKEN_PSG_BUREAU,
		TOKEN_PSG_DEPT,LOCO_TYPE,CRH_TYPE,ELEC_SUPPLY,
		DEJ_COLLECT,AIR_CONDITION,NOTE,CREAT_PEOPLE,
		CREAT_PEOPLE_ORG,CREAT_TIME)
		(<foreach collection="list" item="item" index="index"
            separator="UNION">
            SELECT
            #{item.unitCrossId,jdbcType=VARCHAR},
            #{item.marshallingName,jdbcType=VARCHAR},
            #{item.groupSerialNbr,jdbcType=NUMERIC},
            #{item.crossId,jdbcType=VARCHAR},
            #{item.chartId,jdbcType=VARCHAR},#{item.chartName,jdbcType=VARCHAR},#{item.crossStartDate,jdbcType=VARCHAR},#{item.crossEndDate,jdbcType=VARCHAR},
            #{item.crossName,jdbcType=VARCHAR},#{item.crossSpareName,jdbcType=VARCHAR},#{item.alterNateDate,jdbcType=VARCHAR},#{item.alterNateTranNbr,jdbcType=VARCHAR},
            #{item.spareFlag,jdbcType=VARCHAR},#{item.cutOld,jdbcType=NUMERIC},#{item.groupTotalNbr,jdbcType=NUMERIC},#{item.pairNbr,jdbcType=VARCHAR},
            #{item.highlineFlag,jdbcType=VARCHAR}, #{item.highlineRule,jdbcType=VARCHAR},#{item.commonlineRule,jdbcType=VARCHAR},#{item.appointWeek,jdbcType=VARCHAR},
            #{item.appointDay,jdbcType=VARCHAR},#{item.crossSection,jdbcType=VARCHAR},#{item.throughline,jdbcType=VARCHAR},#{item.startBureau,jdbcType=VARCHAR},
            #{item.tokenVehBureau,jdbcType=VARCHAR},#{item.tokenVehDept,jdbcType=VARCHAR},#{item.tokenVehDepot,jdbcType=VARCHAR},#{item.tokenPsgBureau,jdbcType=VARCHAR},
            #{item.tokenPsgDept,jdbcType=VARCHAR},#{item.locoType,jdbcType=VARCHAR},#{item.crhType,jdbcType=VARCHAR},#{item.elecSupply,jdbcType=NUMERIC},
            #{item.dejCollect,jdbcType=NUMERIC},#{item.airCondition,jdbcType=NUMERIC},#{item.note,jdbcType=VARCHAR},#{item.createPeople,jdbcType=VARCHAR},
            #{item.createPeopleOrg,jdbcType=VARCHAR},
            sysdate
            from dual 
             </foreach>
        ) 
	</insert>
	
	<insert id="addUnitCrossTrainInfo" parameterType="java.util.List">
     insert into unit_cross_train
     (UNIT_CROSS_TRAIN_ID,
     UNIT_CROSS_ID,
     TRAIN_SORT,TRAIN_NBR,BASE_TRAIN_ID,
     START_STN,START_BUREAU,END_STN,END_BUREAU,
     DAY_GAP,ALTERNATE_TRAIN_NBR,ALTERNATE_TIME,SPARE_FLAG,
     SPARE_APPLY_FLAG,HIGHLINE_FLAG,HIGHLINE_RULE,COMMONLINE_RULE,
     APPOINT_WEEK,APPOINT_DAY)
     (<foreach collection="list" item="item" index="index"
           separator="UNION">
       SELECT
       #{item.unitCrossTrainId,jdbcType=VARCHAR},
       #{item.unitCrossId,jdbcType=VARCHAR},#{item.trainSort,jdbcType=NUMERIC},#{item.trainNbr,jdbcType=VARCHAR},#{item.baseTrainId,jdbcType=VARCHAR},
       #{item.startStn,jdbcType=VARCHAR}, #{item.startBureau,jdbcType=VARCHAR},#{item.endStn,jdbcType=VARCHAR},#{item.endBureau,jdbcType=VARCHAR},
       #{item.dayGap,jdbcType=NUMERIC},#{item.alertNateTrainNbr,jdbcType=VARCHAR},to_date(#{item.alertNateTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss'), #{item.spareFlag,jdbcType=NUMERIC},
       #{item.spareApplyFlage,jdbcType=NUMERIC}, #{item.highlineFlag,jdbcType=NUMERIC},#{item.highlineRule,jdbcType=VARCHAR},#{item.commonLineRule,jdbcType=VARCHAR},
       #{item.appointWeek,jdbcType=VARCHAR},#{item.appointDay,jdbcType=VARCHAR}
       from dual
       
      </foreach>
     ) 
	</insert>
	
	
	<insert id="addCrossInfo"  parameterType="java.util.List" >

		insert into base_cross
		(BASE_CROSS_ID,
		BASE_CHART_ID,BASE_CHART_NAME,CROSS_START_DATE,CROSS_END_DATE,
		CROSS_NAME,CROSS_SPARE_NAME,ALTERNATE_DATE,ALTERNATE_TRAIN_NBR,
		SPARE_FLAG,CUT_OLD,GROUP_TOTAL_NBR,PAIR_NBR,
		HIGHLINE_FLAG,HIGHLINE_RULE,COMMONLINE_RULE,APPOINT_WEEK,
		APPOINT_DAY,CROSS_SECTION,THROUGH_LINE,START_BUREAU,
		TOKEN_VEH_BUREAU,TOKEN_VEH_DEPT,TOKEN_VEH_DEPOT,TOKEN_PSG_BUREAU,
		TOKEN_PSG_DEPT,LOCO_TYPE,CRH_TYPE,ELEC_SUPPLY,
		DEJ_COLLECT,AIR_CONDITION,NOTE,CREAT_PEOPLE,
		CREAT_PEOPLE_ORG,CREAT_TIME)
		(<foreach collection="list" item="item" index="index"
            separator="UNION">
            SELECT
            #{item.crossId,jdbcType=VARCHAR},
            #{item.chartId,jdbcType=VARCHAR},#{item.chartName,jdbcType=VARCHAR},#{item.crossStartDate,jdbcType=VARCHAR},#{item.crossEndDate,jdbcType=VARCHAR},
            #{item.crossName,jdbcType=VARCHAR},#{item.crossSpareName,jdbcType=VARCHAR},#{item.alterNateDate,jdbcType=VARCHAR},#{item.alterNateTranNbr,jdbcType=VARCHAR},
            #{item.spareFlag,jdbcType=VARCHAR},#{item.cutOld,jdbcType=NUMERIC},#{item.groupTotalNbr,jdbcType=NUMERIC},#{item.pairNbr,jdbcType=VARCHAR},
            #{item.highlineFlag,jdbcType=VARCHAR}, #{item.highlineRule,jdbcType=VARCHAR},#{item.commonlineRule,jdbcType=VARCHAR},#{item.appointWeek,jdbcType=VARCHAR},
            #{item.appointDay,jdbcType=VARCHAR},#{item.crossSection,jdbcType=VARCHAR},#{item.throughline,jdbcType=VARCHAR},#{item.startBureau,jdbcType=VARCHAR},
            #{item.tokenVehBureau,jdbcType=VARCHAR},#{item.tokenVehDept,jdbcType=VARCHAR},#{item.tokenVehDepot,jdbcType=VARCHAR},#{item.tokenPsgBureau,jdbcType=VARCHAR},
            #{item.tokenPsgDept,jdbcType=VARCHAR},#{item.locoType,jdbcType=VARCHAR},#{item.crhType,jdbcType=VARCHAR},#{item.elecSupply,jdbcType=NUMERIC},
            #{item.dejCollect,jdbcType=NUMERIC},#{item.airCondition,jdbcType=NUMERIC},#{item.note,jdbcType=VARCHAR},#{item.createPeople,jdbcType=VARCHAR},
            #{item.createPeopleOrg,jdbcType=VARCHAR},
            sysdate
            from dual 
             </foreach>
        ) 
	</insert>

	<insert id="addCrossTrainInfo" parameterType="java.util.List">
	     insert into base_cross_train
	     (BASE_CROSS_TRAIN_ID,
	     BASE_CROSS_ID,TRAIN_SORT,TRAIN_NBR,BASE_TRAIN_ID,
	     START_STN,START_BUREAU,END_STN,END_BUREAU,
	     DAY_GAP,ALTERNATE_TRAIN_NBR,ALTERNATE_TIME,SPARE_FLAG,
	     SPARE_APPLY_FLAG,HIGHLINE_FLAG,HIGHLINE_RULE,COMMONLINE_RULE,
	     APPOINT_WEEK,APPOINT_DAY)
	     (<foreach collection="list" item="item" index="index"
            separator="UNION">
	       SELECT
	       #{item.crossTainId,jdbcType=VARCHAR},
	       #{item.crossId,jdbcType=VARCHAR},#{item.trainSort,jdbcType=NUMERIC},#{item.trainNbr,jdbcType=VARCHAR},#{item.baseTrainId,jdbcType=VARCHAR},
	       #{item.startStn,jdbcType=VARCHAR}, #{item.startBureau,jdbcType=VARCHAR},#{item.endStn,jdbcType=VARCHAR},#{item.endBureau,jdbcType=VARCHAR},
	       #{item.dayGap,jdbcType=NUMERIC},#{item.alertNateTrainNbr,jdbcType=VARCHAR},to_date(#{item.alertNateTime,jdbcType=VARCHAR},'yyyy-MM-dd hh24:mi:ss'), #{item.spareFlag,jdbcType=NUMERIC},
	       #{item.spareApplyFlage,jdbcType=NUMERIC}, #{item.highlineFlag,jdbcType=NUMERIC},#{item.highlineRule,jdbcType=NUMERIC},#{item.commonLineRule,jdbcType=NUMERIC},
	       #{item.appointWeek,jdbcType=VARCHAR},#{item.appointDay,jdbcType=VARCHAR}
	       from dual
	       
	      </foreach>
	     ) 
	</insert>
	
	<select id="getCrossInfoTotalCount" parameterType="map" resultType="map">
	  select count(*) as count from BASE_CROSS where 1=1
	  <if test="tokenVehBureau != null">
			AND TOKEN_VEH_BUREAU= #{tokenVehBureau}
		</if>
		<if test="startBureau != null">
		   AND START_BUREAU = #{startBureau}
		</if>
		<if test="highlineFlag != null">
		AND HIGHLINE_FLAG = #{highlineFlag}
		</if> 
		 <if test="checkFlag == 0 ">
		AND check_time is null
		</if>
		 <if test="checkFlag == 1 ">
		AND check_time is not null
		</if>
	   <if test="unitCreateFlag == 0 ">
		AND CREAT_TIME is null
		</if>
		 <if test="unitCreateFlag == 1 ">
		AND CREAT_TIME is not null
		</if>
	</select>
	
	<select id="getCrossInfo"  parameterType="map" resultType="org.railway.com.trainplan.entity.SubCrossInfo">
	  select m.*  from  (select 
		BASE_CROSS_ID as crossId,CROSS_NAME as crossName,TOKEN_VEH_BUREAU as tokenVehBureau ,START_BUREAU as startBureau,HIGHLINE_FLAG as highlineFlag,creat_time as createTime,
	    case when creat_time is not null  then '1' else '0' end as unitCreateFlag,
        case when check_time is not null  then '1' else '0' end as checkFlag
		 from BASE_CROSS
		where 1=1 
		<if test="tokenVehBureau != null">
			AND TOKEN_VEH_BUREAU= #{tokenVehBureau}
		</if>
		<if test="startBureau != null">
		   AND START_BUREAU = #{startBureau}
		</if>
		<if test="highlineFlag != null">
		AND HIGHLINE_FLAG = #{highlineFlag}
		</if>
	    <if test="checkFlag == 0 ">
		AND check_time is null
		</if>
		 <if test="checkFlag == 1 ">
		AND check_time is not null
		</if>
	   <if test="unitCreateFlag == 0 ">
		AND CREAT_TIME is null
		</if>
		 <if test="unitCreateFlag == 1 ">
		AND CREAT_TIME is not null
		</if>
		
		 order by crossName ) m  where ROWNUM >=#{rownumstart} AND ROWNUM &lt;=#{rownumend} 
		
	</select>

  <select id="getUnitCrossInfoCount"  parameterType="map" resultType="map">
     select count(*) as  count from UNIT_CROSS where 1=1  
     <if test="tokenVehBureau != null">
			AND TOKEN_VEH_BUREAU= #{tokenVehBureau}
		</if>
		<if test="startBureau != null">
		   AND START_BUREAU = #{startBureau}
		</if>
		<if test="highlineFlag != null">
		AND HIGHLINE_FLAG = #{highlineFlag}
		</if>
  </select>
  
  
  
   <select id="getUnitCrossInfo"  parameterType="map" resultType="org.railway.com.trainplan.entity.SubCrossInfo">
	  select m.*  from  (select 
		UNIT_CROSS_ID as unitCrossId,MARSHALLING_NAME as marshallingName,TOKEN_VEH_BUREAU as tokenVehBureau ,START_BUREAU as startBureau,HIGHLINE_FLAG as highlineFlag,GROUP_SERIAL_NBR as groupSerialNbr from UNIT_CROSS
		where 1=1 
		<if test="tokenVehBureau != null">
			AND TOKEN_VEH_BUREAU= #{tokenVehBureau}
		</if>
		<if test="startBureau != null">
		   AND START_BUREAU = #{startBureau}
		</if>
		<if test="highlineFlag != null">
		AND HIGHLINE_FLAG = #{highlineFlag}
		</if>
		order by groupSerialNbr) m  where ROWNUM >=#{rownumstart} AND ROWNUM &lt;=#{rownumend} 
		
	</select>
	
	<select id="getTrainNbrFromUnitCross" parameterType="String" resultType="map">
		select DISTINCT(B.TRAIN_NBR),A.BASE_CHART_ID from unit_cross A ,base_cross_train B 
        where A.BASE_CROSS_ID = B.BASE_CROSS_ID AND A.UNIT_CROSS_ID=#{unitCrossId}
	</select>


    <select id="getCrossNameWithBaseCrossId" parameterType="String" resultType="map">
     select cross_name,cross_start_date,cross_end_date from base_cross where base_cross_id=#{baseCrossId}
    </select>

   <select id="getTrainNbrWithBaseCrossId" parameterType="String" resultType="map">
   select  BASE_TRAIN_ID ,train_nbr,train_sort,day_gap  from base_cross_train where base_cross_id=#{baseCrossId} order by train_sort
   
   </select>

 <update id="updateCrossCheckTime" parameterType="map">
		 update base_cross set check_time = sysdate where base_cross_id in (${baseCrossIds})

	</update>
 
 
   <update id="updateCrossCreateTime" parameterType="map">
		 update base_cross set creat_time = sysdate where base_cross_id in (${baseCrossIds})

  </update>
	
</mapper>